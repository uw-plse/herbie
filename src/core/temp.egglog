(datatype M
          (Num BigRat :cost 4294967295)
          (Var String :cost 4294967295)
          (If M M M :cost 4294967295)
          (Neq M M :cost 4294967295)
          (Mul M M :cost 4294967295)
          (Add M M :cost 4294967295)
          (Sub M M :cost 4294967295)
          (Div M M :cost 4294967295)
          (Lt M M :cost 4294967295)
          (Lte M M :cost 4294967295)
          (Eq M M :cost 4294967295)
          (Gt M M :cost 4294967295)
          (Gte M M :cost 4294967295)
          (E :cost 4294967295)
          (False :cost 4294967295)
          (Infinity :cost 4294967295)
          (Nan :cost 4294967295)
          (Pi :cost 4294967295)
          (True :cost 4294967295)
          (Acos M :cost 4294967295)
          (Acosh M :cost 4294967295)
          (And M M :cost 4294967295)
          (Asin M :cost 4294967295)
          (Asinh M :cost 4294967295)
          (Atan M :cost 4294967295)
          (Atan2 M M :cost 4294967295)
          (Atanh M :cost 4294967295)
          (Cbrt M :cost 4294967295)
          (Ceil M :cost 4294967295)
          (Copysign M M :cost 4294967295)
          (Cos M :cost 4294967295)
          (Cosh M :cost 4294967295)
          (Erf M :cost 4294967295)
          (Exp M :cost 4294967295)
          (Exp2 M :cost 4294967295)
          (Fabs M :cost 4294967295)
          (Fdim M M :cost 4294967295)
          (Floor M :cost 4294967295)
          (Fmax M M :cost 4294967295)
          (Fmin M M :cost 4294967295)
          (Fmod M M :cost 4294967295)
          (Lgamma M :cost 4294967295)
          (Log M :cost 4294967295)
          (Log10 M :cost 4294967295)
          (Log2 M :cost 4294967295)
          (Logb M :cost 4294967295)
          (Neg M :cost 4294967295)
          (Not M :cost 4294967295)
          (Or M M :cost 4294967295)
          (Pow M M :cost 4294967295)
          (Remainder M M :cost 4294967295)
          (Rint M :cost 4294967295)
          (Round M :cost 4294967295)
          (Sin M :cost 4294967295)
          (Sinh M :cost 4294967295)
          (Sqrt M :cost 4294967295)
          (Tan M :cost 4294967295)
          (Tanh M :cost 4294967295)
          (Tgamma M :cost 4294967295)
          (Trunc M :cost 4294967295))
(datatype MTy
          (Numbinary32 BigRat :cost 32)
          (Numbinary64 BigRat :cost 64)
          (Varbinary32 String :cost 32)
          (Varbinary64 String :cost 64)
          (Varbool String :cost 1)
          (IfTy MTy MTy MTy :cost 1)
          (Approx M MTy :cost 0)
          (TrueboolTy :cost 1)
          (FalseboolTy :cost 1)
          (NotboolTy MTy :cost 1)
          (AndboolTy MTy MTy :cost 1)
          (OrboolTy MTy MTy :cost 1)
          (Pif64Ty :cost 64)
          (Pif32Ty :cost 32)
          (Ef64Ty :cost 64)
          (Ef32Ty :cost 32)
          (Infinityf64Ty :cost 64)
          (Infinityf32Ty :cost 32)
          (Nanf64Ty :cost 64)
          (Nanf32Ty :cost 32)
          (Negf64Ty MTy :cost 128)
          (Negf32Ty MTy :cost 64)
          (Addf64Ty MTy MTy :cost 128)
          (Addf32Ty MTy MTy :cost 64)
          (Subf64Ty MTy MTy :cost 128)
          (Subf32Ty MTy MTy :cost 64)
          (Mulf64Ty MTy MTy :cost 256)
          (Mulf32Ty MTy MTy :cost 128)
          (Divf64Ty MTy MTy :cost 640)
          (Divf32Ty MTy MTy :cost 320)
          (Eqf64Ty MTy MTy :cost 256)
          (Eqf32Ty MTy MTy :cost 128)
          (Neqf64Ty MTy MTy :cost 256)
          (Neqf32Ty MTy MTy :cost 128)
          (Gtf64Ty MTy MTy :cost 256)
          (Gtf32Ty MTy MTy :cost 128)
          (Ltf64Ty MTy MTy :cost 256)
          (Ltf32Ty MTy MTy :cost 128)
          (Gtef64Ty MTy MTy :cost 256)
          (Gtef32Ty MTy MTy :cost 128)
          (Ltef64Ty MTy MTy :cost 256)
          (Ltef32Ty MTy MTy :cost 128)
          (Acosf64Ty MTy :cost 6400)
          (Acoshf64Ty MTy :cost 6400)
          (Asinf64Ty MTy :cost 6400)
          (Asinhf64Ty MTy :cost 6400)
          (Atanf64Ty MTy :cost 6400)
          (Atan2f64Ty MTy MTy :cost 6400)
          (Atanhf64Ty MTy :cost 6400)
          (Cbrtf64Ty MTy :cost 6400)
          (Ceilf64Ty MTy :cost 6400)
          (Copysignf64Ty MTy MTy :cost 6400)
          (Cosf64Ty MTy :cost 6400)
          (Coshf64Ty MTy :cost 6400)
          (Erff64Ty MTy :cost 6400)
          (Expf64Ty MTy :cost 6400)
          (Exp2f64Ty MTy :cost 6400)
          (Fabsf64Ty MTy :cost 128)
          (Fdimf64Ty MTy MTy :cost 6400)
          (Floorf64Ty MTy :cost 6400)
          (Fmaxf64Ty MTy MTy :cost 6400)
          (Fminf64Ty MTy MTy :cost 6400)
          (Fmodf64Ty MTy MTy :cost 6400)
          (Lgammaf64Ty MTy :cost 6400)
          (Logf64Ty MTy :cost 6400)
          (Log10f64Ty MTy :cost 6400)
          (Log2f64Ty MTy :cost 6400)
          (Logbf64Ty MTy :cost 6400)
          (Powf64Ty MTy MTy :cost 6400)
          (Remainderf64Ty MTy MTy :cost 6400)
          (Rintf64Ty MTy :cost 6400)
          (Roundf64Ty MTy :cost 6400)
          (Sinf64Ty MTy :cost 6400)
          (Sinhf64Ty MTy :cost 6400)
          (Sqrtf64Ty MTy :cost 640)
          (Tanf64Ty MTy :cost 6400)
          (Tanhf64Ty MTy :cost 6400)
          (Tgammaf64Ty MTy :cost 6400)
          (Truncf64Ty MTy :cost 6400)
          (Acosf32Ty MTy :cost 3200)
          (Acoshf32Ty MTy :cost 3200)
          (Asinf32Ty MTy :cost 3200)
          (Asinhf32Ty MTy :cost 3200)
          (Atanf32Ty MTy :cost 3200)
          (Atan2f32Ty MTy MTy :cost 3200)
          (Atanhf32Ty MTy :cost 3200)
          (Cbrtf32Ty MTy :cost 3200)
          (Ceilf32Ty MTy :cost 3200)
          (Copysignf32Ty MTy MTy :cost 3200)
          (Cosf32Ty MTy :cost 3200)
          (Coshf32Ty MTy :cost 3200)
          (Erff32Ty MTy :cost 3200)
          (Expf32Ty MTy :cost 3200)
          (Exp2f32Ty MTy :cost 3200)
          (Fabsf32Ty MTy :cost 64)
          (Fdimf32Ty MTy MTy :cost 3200)
          (Floorf32Ty MTy :cost 3200)
          (Fmaxf32Ty MTy MTy :cost 3200)
          (Fminf32Ty MTy MTy :cost 3200)
          (Fmodf32Ty MTy MTy :cost 3200)
          (Lgammaf32Ty MTy :cost 3200)
          (Logf32Ty MTy :cost 3200)
          (Log10f32Ty MTy :cost 3200)
          (Log2f32Ty MTy :cost 3200)
          (Logbf32Ty MTy :cost 3200)
          (Powf32Ty MTy MTy :cost 3200)
          (Remainderf32Ty MTy MTy :cost 3200)
          (Rintf32Ty MTy :cost 3200)
          (Roundf32Ty MTy :cost 3200)
          (Sinf32Ty MTy :cost 3200)
          (Sinhf32Ty MTy :cost 3200)
          (Sqrtf32Ty MTy :cost 320)
          (Tanf32Ty MTy :cost 3200)
          (Tanhf32Ty MTy :cost 3200)
          (Tgammaf32Ty MTy :cost 3200)
          (Truncf32Ty MTy :cost 3200)
          (Erfcf64Ty MTy :cost 6400)
          (Expm1f64Ty MTy :cost 6400)
          (Log1pf64Ty MTy :cost 6400)
          (Hypotf64Ty MTy MTy :cost 6400)
          (Fmaf64Ty MTy MTy MTy :cost 256)
          (Erfcf32Ty MTy :cost 3200)
          (Expm1f32Ty MTy :cost 3200)
          (Log1pf32Ty MTy :cost 3200)
          (Hypotf32Ty MTy MTy :cost 3200)
          (Fmaf32Ty MTy MTy MTy :cost 128))
(function lower (M String) MTy)
(function lift (MTy) M :unextractable)
(ruleset lowering)
(ruleset lifting)
(ruleset math)
(ruleset fp-safe)
(rule ((= e (True)))
      ((let t0 "bool") (let et0 (TrueboolTy)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (False)))
      ((let t0 "bool") (let et0 (FalseboolTy)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Not x)) (= tx (lower x "bool")))
      ((let t0 "bool") (let et0 (NotboolTy
                                 tx)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (And x y)) (= tx (lower x "bool")) (= ty (lower y "bool")))
      ((let t0 "bool") (let et0 (AndboolTy
                                 tx
                                 ty)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Or x y)) (= tx (lower x "bool")) (= ty (lower y "bool")))
      ((let t0 "bool") (let et0 (OrboolTy
                                 tx
                                 ty)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Pi)))
      ((let t0 "binary64") (let et0 (Pif64Ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Pi)))
      ((let t0 "binary32") (let et0 (Pif32Ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (E)))
      ((let t0 "binary64") (let et0 (Ef64Ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (E)))
      ((let t0 "binary32") (let et0 (Ef32Ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Infinity)))
      ((let t0 "binary64") (let et0 (Infinityf64Ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Infinity)))
      ((let t0 "binary32") (let et0 (Infinityf32Ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Nan)))
      ((let t0 "binary64") (let et0 (Nanf64Ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Nan)))
      ((let t0 "binary32") (let et0 (Nanf32Ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Neg x)) (= tx (lower x "binary64")))
      ((let t0 "binary64") (let et0 (Negf64Ty
                                     tx)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Neg x)) (= tx (lower x "binary32")))
      ((let t0 "binary32") (let et0 (Negf32Ty
                                     tx)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Add x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
      ((let t0 "binary64") (let et0 (Addf64Ty
                                     tx
                                     ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Add x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
      ((let t0 "binary32") (let et0 (Addf32Ty
                                     tx
                                     ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Sub x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
      ((let t0 "binary64") (let et0 (Subf64Ty
                                     tx
                                     ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Sub x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
      ((let t0 "binary32") (let et0 (Subf32Ty
                                     tx
                                     ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Mul x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
      ((let t0 "binary64") (let et0 (Mulf64Ty
                                     tx
                                     ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Mul x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
      ((let t0 "binary32") (let et0 (Mulf32Ty
                                     tx
                                     ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Div x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
      ((let t0 "binary64") (let et0 (Divf64Ty
                                     tx
                                     ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Div x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
      ((let t0 "binary32") (let et0 (Divf32Ty
                                     tx
                                     ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Eq x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
      ((let t0 "bool") (let et0 (Eqf64Ty
                                 tx
                                 ty)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Eq x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
      ((let t0 "bool") (let et0 (Eqf32Ty
                                 tx
                                 ty)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Neq x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
      ((let t0 "bool") (let et0 (Neqf64Ty
                                 tx
                                 ty)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Neq x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
      ((let t0 "bool") (let et0 (Neqf32Ty
                                 tx
                                 ty)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Gt x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
      ((let t0 "bool") (let et0 (Gtf64Ty
                                 tx
                                 ty)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Gt x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
      ((let t0 "bool") (let et0 (Gtf32Ty
                                 tx
                                 ty)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Lt x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
      ((let t0 "bool") (let et0 (Ltf64Ty
                                 tx
                                 ty)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Lt x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
      ((let t0 "bool") (let et0 (Ltf32Ty
                                 tx
                                 ty)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Gte x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
      ((let t0 "bool") (let et0 (Gtef64Ty
                                 tx
                                 ty)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Gte x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
      ((let t0 "bool") (let et0 (Gtef32Ty
                                 tx
                                 ty)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Lte x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
      ((let t0 "bool") (let et0 (Ltef64Ty
                                 tx
                                 ty)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Lte x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
      ((let t0 "bool") (let et0 (Ltef32Ty
                                 tx
                                 ty)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Acos x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Acosf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Acosh x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Acoshf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Asin x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Asinf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Asinh x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Asinhf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Atan x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Atanf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Atan2 x0 x1)) (= tx0 (lower x0 "binary64")) (= tx1 (lower x1 "binary64")))
      ((let t0 "binary64") (let et0 (Atan2f64Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Atanh x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Atanhf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Cbrt x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Cbrtf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Ceil x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Ceilf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Copysign x0 x1)) (= tx0 (lower x0 "binary64")) (= tx1 (lower x1 "binary64")))
      ((let t0 "binary64") (let et0 (Copysignf64Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Cos x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Cosf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Cosh x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Coshf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Erf x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Erff64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Exp x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Expf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Exp2 x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Exp2f64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Fabs x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Fabsf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Fdim x0 x1)) (= tx0 (lower x0 "binary64")) (= tx1 (lower x1 "binary64")))
      ((let t0 "binary64") (let et0 (Fdimf64Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Floor x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Floorf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Fmax x0 x1)) (= tx0 (lower x0 "binary64")) (= tx1 (lower x1 "binary64")))
      ((let t0 "binary64") (let et0 (Fmaxf64Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Fmin x0 x1)) (= tx0 (lower x0 "binary64")) (= tx1 (lower x1 "binary64")))
      ((let t0 "binary64") (let et0 (Fminf64Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Fmod x0 x1)) (= tx0 (lower x0 "binary64")) (= tx1 (lower x1 "binary64")))
      ((let t0 "binary64") (let et0 (Fmodf64Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Lgamma x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Lgammaf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Log x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Logf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Log10 x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Log10f64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Log2 x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Log2f64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Logb x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Logbf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Pow x0 x1)) (= tx0 (lower x0 "binary64")) (= tx1 (lower x1 "binary64")))
      ((let t0 "binary64") (let et0 (Powf64Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Remainder x0 x1)) (= tx0 (lower x0 "binary64")) (= tx1 (lower x1 "binary64")))
      ((let t0 "binary64") (let et0 (Remainderf64Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Rint x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Rintf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Round x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Roundf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Sin x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Sinf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Sinh x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Sinhf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Sqrt x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Sqrtf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Tan x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Tanf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Tanh x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Tanhf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Tgamma x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Tgammaf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Trunc x0)) (= tx0 (lower x0 "binary64")))
      ((let t0 "binary64") (let et0 (Truncf64Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Acos x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Acosf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Acosh x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Acoshf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Asin x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Asinf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Asinh x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Asinhf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Atan x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Atanf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Atan2 x0 x1)) (= tx0 (lower x0 "binary32")) (= tx1 (lower x1 "binary32")))
      ((let t0 "binary32") (let et0 (Atan2f32Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Atanh x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Atanhf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Cbrt x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Cbrtf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Ceil x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Ceilf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Copysign x0 x1)) (= tx0 (lower x0 "binary32")) (= tx1 (lower x1 "binary32")))
      ((let t0 "binary32") (let et0 (Copysignf32Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Cos x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Cosf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Cosh x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Coshf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Erf x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Erff32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Exp x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Expf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Exp2 x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Exp2f32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Fabs x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Fabsf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Fdim x0 x1)) (= tx0 (lower x0 "binary32")) (= tx1 (lower x1 "binary32")))
      ((let t0 "binary32") (let et0 (Fdimf32Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Floor x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Floorf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Fmax x0 x1)) (= tx0 (lower x0 "binary32")) (= tx1 (lower x1 "binary32")))
      ((let t0 "binary32") (let et0 (Fmaxf32Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Fmin x0 x1)) (= tx0 (lower x0 "binary32")) (= tx1 (lower x1 "binary32")))
      ((let t0 "binary32") (let et0 (Fminf32Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Fmod x0 x1)) (= tx0 (lower x0 "binary32")) (= tx1 (lower x1 "binary32")))
      ((let t0 "binary32") (let et0 (Fmodf32Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Lgamma x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Lgammaf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Log x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Logf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Log10 x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Log10f32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Log2 x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Log2f32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Logb x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Logbf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Pow x0 x1)) (= tx0 (lower x0 "binary32")) (= tx1 (lower x1 "binary32")))
      ((let t0 "binary32") (let et0 (Powf32Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Remainder x0 x1)) (= tx0 (lower x0 "binary32")) (= tx1 (lower x1 "binary32")))
      ((let t0 "binary32") (let et0 (Remainderf32Ty
                                     tx0
                                     tx1)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Rint x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Rintf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Round x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Roundf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Sin x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Sinf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Sinh x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Sinhf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Sqrt x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Sqrtf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Tan x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Tanf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Tanh x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Tanhf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Tgamma x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Tgammaf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Trunc x0)) (= tx0 (lower x0 "binary32")))
      ((let t0 "binary32") (let et0 (Truncf32Ty
                                     tx0)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule
 ((= e (Sub (Num (bigrat (from-string "1") (from-string "1"))) (Erf x))) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Erfcf64Ty
                                tx)
                        )
                      (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sub (Exp x) (Num (bigrat (from-string "1") (from-string "1"))))) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Expm1f64Ty
                                tx)
                        )
                      (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Log (Add (Num (bigrat (from-string "1") (from-string "1"))) x))) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Log1pf64Ty
                                tx)
                        )
                      (union (lower e t0) et0))
 :ruleset
 lowering)
(rule ((= e (Sqrt (Add (Mul x x) (Mul y y)))) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
      ((let t0 "binary64") (let et0 (Hypotf64Ty
                                     tx
                                     ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Add (Mul x y) z)) (= tx (lower x "binary64"))
                               (= ty (lower y "binary64"))
                               (= tz (lower z "binary64")))
      ((let t0 "binary64") (let et0 (Fmaf64Ty
                                     tx
                                     ty
                                     tz)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule
 ((= e (Sub (Num (bigrat (from-string "1") (from-string "1"))) (Erf x))) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Erfcf32Ty
                                tx)
                        )
                      (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sub (Exp x) (Num (bigrat (from-string "1") (from-string "1"))))) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Expm1f32Ty
                                tx)
                        )
                      (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Log (Add (Num (bigrat (from-string "1") (from-string "1"))) x))) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Log1pf32Ty
                                tx)
                        )
                      (union (lower e t0) et0))
 :ruleset
 lowering)
(rule ((= e (Sqrt (Add (Mul x x) (Mul y y)))) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
      ((let t0 "binary32") (let et0 (Hypotf32Ty
                                     tx
                                     ty)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (Add (Mul x y) z)) (= tx (lower x "binary32"))
                               (= ty (lower y "binary32"))
                               (= tz (lower z "binary32")))
      ((let t0 "binary32") (let et0 (Fmaf32Ty
                                     tx
                                     ty
                                     tz)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (TrueboolTy)))
      ((let se (True)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (FalseboolTy)))
      ((let se (False)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (NotboolTy x)) (= sx (lift x)))
      ((let se (Not
                sx)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (AndboolTy x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (And
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (OrboolTy x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Or
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Pif64Ty)))
      ((let se (Pi)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Pif32Ty)))
      ((let se (Pi)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Ef64Ty)))
      ((let se (E)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Ef32Ty)))
      ((let se (E)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Infinityf64Ty)))
      ((let se (Infinity)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Infinityf32Ty)))
      ((let se (Infinity)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Nanf64Ty)))
      ((let se (Nan)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Nanf32Ty)))
      ((let se (Nan)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Negf64Ty x)) (= sx (lift x)))
      ((let se (Neg
                sx)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Negf32Ty x)) (= sx (lift x)))
      ((let se (Neg
                sx)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Addf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Add
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Addf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Add
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Subf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Sub
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Subf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Sub
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Mulf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Mul
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Mulf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Mul
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Divf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Div
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Divf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Div
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Eqf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Eq
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Eqf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Eq
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Neqf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Neq
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Neqf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Neq
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Gtf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Gt
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Gtf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Gt
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Ltf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Lt
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Ltf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Lt
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Gtef64Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Gte
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Gtef32Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Gte
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Ltef64Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Lte
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Ltef32Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Lte
                sx
                sy)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Acosf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Acos
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Acoshf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Acosh
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Asinf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Asin
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Asinhf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Asinh
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Atanf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Atan
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Atan2f64Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Atan2
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Atanhf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Atanh
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Cbrtf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Cbrt
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Ceilf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Ceil
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Copysignf64Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Copysign
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Cosf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Cos
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Coshf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Cosh
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Erff64Ty x0)) (= sx0 (lift x0)))
      ((let se (Erf
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Expf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Exp
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Exp2f64Ty x0)) (= sx0 (lift x0)))
      ((let se (Exp2
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Fabsf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Fabs
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Fdimf64Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Fdim
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Floorf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Floor
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Fmaxf64Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Fmax
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Fminf64Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Fmin
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Fmodf64Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Fmod
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Lgammaf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Lgamma
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Logf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Log
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Log10f64Ty x0)) (= sx0 (lift x0)))
      ((let se (Log10
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Log2f64Ty x0)) (= sx0 (lift x0)))
      ((let se (Log2
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Logbf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Logb
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Powf64Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Pow
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Remainderf64Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Remainder
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Rintf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Rint
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Roundf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Round
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Sinf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Sin
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Sinhf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Sinh
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Sqrtf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Sqrt
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Tanf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Tan
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Tanhf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Tanh
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Tgammaf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Tgamma
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Truncf64Ty x0)) (= sx0 (lift x0)))
      ((let se (Trunc
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Acosf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Acos
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Acoshf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Acosh
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Asinf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Asin
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Asinhf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Asinh
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Atanf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Atan
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Atan2f32Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Atan2
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Atanhf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Atanh
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Cbrtf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Cbrt
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Ceilf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Ceil
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Copysignf32Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Copysign
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Cosf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Cos
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Coshf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Cosh
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Erff32Ty x0)) (= sx0 (lift x0)))
      ((let se (Erf
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Expf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Exp
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Exp2f32Ty x0)) (= sx0 (lift x0)))
      ((let se (Exp2
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Fabsf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Fabs
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Fdimf32Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Fdim
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Floorf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Floor
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Fmaxf32Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Fmax
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Fminf32Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Fmin
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Fmodf32Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Fmod
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Lgammaf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Lgamma
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Logf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Log
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Log10f32Ty x0)) (= sx0 (lift x0)))
      ((let se (Log10
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Log2f32Ty x0)) (= sx0 (lift x0)))
      ((let se (Log2
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Logbf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Logb
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Powf32Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Pow
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Remainderf32Ty x0 x1)) (= sx0 (lift x0)) (= sx1 (lift x1)))
      ((let se (Remainder
                sx0
                sx1)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Rintf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Rint
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Roundf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Round
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Sinf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Sin
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Sinhf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Sinh
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Sqrtf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Sqrt
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Tanf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Tan
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Tanhf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Tanh
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Tgammaf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Tgamma
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Truncf32Ty x0)) (= sx0 (lift x0)))
      ((let se (Trunc
                sx0)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Erfcf64Ty x)) (= sx (lift x)))
      ((let se (Sub
                [Num (bigrat (from-string "1") (from-string "1"))]
                [Erf sx])
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Expm1f64Ty x)) (= sx (lift x)))
      ((let se (Sub
                [Exp sx]
                [Num (bigrat (from-string "1") (from-string "1"))])
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Log1pf64Ty x)) (= sx (lift x)))
      ((let se (Log
                [Add
                 (Num (bigrat (from-string "1") (from-string "1")))
                 sx])
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Hypotf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Sqrt
                [Add
                 (Mul sx sx)
                 (Mul sy sy)])
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Fmaf64Ty x y z)) (= sx (lift x)) (= sy (lift y)) (= sz (lift z)))
      ((let se (Add
                [Mul
                 sx
                 sy]
                sz)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Erfcf32Ty x)) (= sx (lift x)))
      ((let se (Sub
                [Num (bigrat (from-string "1") (from-string "1"))]
                [Erf sx])
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Expm1f32Ty x)) (= sx (lift x)))
      ((let se (Sub
                [Exp sx]
                [Num (bigrat (from-string "1") (from-string "1"))])
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Log1pf32Ty x)) (= sx (lift x)))
      ((let se (Log
                [Add
                 (Num (bigrat (from-string "1") (from-string "1")))
                 sx])
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Hypotf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
      ((let se (Sqrt
                [Add
                 (Mul sx sx)
                 (Mul sy sy)])
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Fmaf32Ty x y z)) (= sx (lift x)) (= sy (lift y)) (= sz (lift z)))
      ((let se (Add
                [Mul
                 sx
                 sy]
                sz)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Num n)))
      ((let tx "binary32") (let etx (Numbinary32
                                     n)
                             )
                           (union (lower e tx) etx))
      :ruleset
      lowering)
(rule ((= e (Num n)))
      ((let tx "binary64") (let etx (Numbinary64
                                     n)
                             )
                           (union (lower e tx) etx))
      :ruleset
      lowering)
(rule ((= e (Numbinary32 n)))
      ((let se (Num
                n)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Numbinary64 n)))
      ((let se (Num
                n)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (If ifc ift iff)) (= tifc (lower ifc "bool"))
                              (= tift (lower ift "binary32"))
                              (= tiff (lower iff "binary32")))
      ((let t0 "binary32") (let et0 (IfTy
                                     tifc
                                     tift
                                     tiff)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (If ifc ift iff)) (= tifc (lower ifc "bool"))
                              (= tift (lower ift "binary64"))
                              (= tiff (lower iff "binary64")))
      ((let t0 "binary64") (let et0 (IfTy
                                     tifc
                                     tift
                                     tiff)
                             )
                           (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (If ifc ift iff)) (= tifc (lower ifc "bool"))
                              (= tift (lower ift "bool"))
                              (= tiff (lower iff "bool")))
      ((let t0 "bool") (let et0 (IfTy
                                 tifc
                                 tift
                                 tiff)
                         )
                       (union (lower e t0) et0))
      :ruleset
      lowering)
(rule ((= e (IfTy ifc ift iff)) (= sifc (lift ifc)) (= sift (lift ift)) (= siff (lift iff)))
      ((let se (If
                sifc
                sift
                siff)
         )
       (union (lift e) se))
      :ruleset
      lifting)
(rule ((= e (Approx spec impl))) ((union (lift e) spec)) :ruleset lifting)
(rule ((= e (Var "x")))
      ((let ty "binary64") (let ety (Varbinary64
                                     "x")
                             )
                           (union (lower e ty) ety))
      :ruleset
      lowering)
(rule ((= e (Varbinary64 "x")))
      ((let se (Var
                "x")
         )
       (union (lift e) se))
      :ruleset
      lifting)
(let ?x (Var
         "x")
  )
(let ?tx (Varbinary64
          "x")
  )
(let ?b1 (Expf64Ty
          ?tx)
  )
(let ?b2 (Numbinary64
          [bigrat
           (from-string "1")
           (from-string "1")])
  )
(let ?b3 (Subf64Ty
          ?b1
          ?b2)
  )
(let ?r4 (Divf64Ty
          ?b1
          ?b3)
  )
(let ?b5 (Exp
          ?x)
  )
(let ?b6 (Num
          [bigrat
           (from-string "1")
           (from-string "1")])
  )
(let ?b7 (Sub
          ?b5
          ?b6)
  )
(let ?b8 (Div
          ?b5
          ?b7)
  )
(let ?r9 (Approx
          ?b8
          ?b1)
  )
(run 10)
(extract (lower (lift ?r9) "binary64"))
(extract (lower (lift ?r4) "binary64"))
